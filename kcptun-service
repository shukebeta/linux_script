#!/usr/bin/python3
# -*- coding: utf-8 -*-

import sys
import os
import subprocess
import time
import json


USAGE = 'Usage:sudo /etc/init.d/kcptun-service {start, stop, restart}'

if len(sys.argv) != 2:
    sys.exit(USAGE)


OP = sys.argv[1]


class KcptunConfig():
    def __init__(self):
            self.localaddr = ':12948'
            self.remoteaddr = 'vps:29900'
            self.key = 'key'
            self.crypt = 'none'
            self.mode = 'fast2'
            self.conn = '1'
            self.autoexpire = '0'
            self.scavengettl = '600'
            self.mtu = '1350'
            self.sndwnd = '512'
            self.rcvwnd = '512'
            self.datashard = '10'
            self.parityshard = '3'
            self.nocomp = 'false'


    def read_from_json(self, j):
        self.__dict__ = json.loads(j)

    def get_run_params(self):
        params = []

        for key,value in self.__dict__.items():
            if value:
                if key == 'nocomp':
                    if value == 'true':
                        params.append('--{}'.format(key))
                    continue
                params.append('--{}'.format(key))
                params.append(value)

        return params

KCPTUN_CONFIG = KcptunConfig()

PIDFILE = '/var/run/kcptun-service.pid'
CONFIGFILE = '/usr/local/etc/kcptun-service-config.json'
EXECFILE = '/usr/local/bin/client_linux_arm5'

def start():
    if not os.path.exists(EXECFILE):
        sys.exit('{} is not exist'.format(EXECFILE))

    if not os.path.exists(CONFIGFILE):
        str = json.dumps(KCPTUN_CONFIG.__dict__, indent=4)
        open(CONFIGFILE, 'w').write(str)
        sys.exit('{} is not exist, now create, please config it'.format(CONFIGFILE))

    with open(CONFIGFILE) as config_file:
        KCPTUN_CONFIG.read_from_json(config_file.read())

    if os.path.exists(PIDFILE):
        print('kcptun-service has been running | pid: {} '.format(open(PIDFILE).readline()), 'continue?(y/n)')
        k = input()
        if not k in ('Y', 'y'):
            sys.exit(1)

    run_params = KCPTUN_CONFIG.get_run_params()
    run_params.insert(0, EXECFILE)

    p = subprocess.Popen(run_params, stdout=subprocess.PIPE)

    pid = p.pid
    open(PIDFILE, 'w').write('{}'.format(pid))
    print(' | '.join(['start ok', 'pid: {}'.format(pid)]))


def stop():
    pid = open(PIDFILE).readline()
    print('stoping kcptun-service | pid: {}'.format(pid))
    if pid:
        if subprocess.call(['kill ' + pid], shell = True) == 0:
            print(' | '.join(['stop ok', 'pid:{}'.format(pid)]))
            if subprocess.call(['rm ' + PIDFILE], shell=True) != 0:
                print('delete permission denied')
    else:
        print('stop error')

def restart():
    print('restart')


ops = {'start':start, 'stop':stop, 'restart':restart}


if __name__ == '__main__':
    if not OP in (ops.keys()):
        sys.exit(USAGE)
    ops[OP]()
